trigger:
- master

variables:
  buildConfiguration: 'release'
  vmImageName: 'windows-latest'

stages:
- stage: Build
  displayName: Build Stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: "Restore Packages"
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: 'select'

    - task: DotNetCoreCLI@2
      displayName: "Build Solution"
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: "Run Tests"
      inputs:
        command: test
        projects: '**/NextDepartures.Test/*.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: "Pack NuGet Packages"
      inputs:
        command: 'pack'
        packagesToPack: '**/NextDepartures.Standard/*.csproj;**/NextDepartures.Storage.GTFS/*.csproj;**/NextDepartures.Storage.SqlServer/*.csproj'
        includesymbols: true
        versioningScheme: 'off'

    - publish: $(Build.ArtifactStagingDirectory)
      displayName: "Publish Pipeline Artifact"
      artifact: drop

- stage: Deploy
  displayName: Deploy Stage
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: NuGetCommand@2
            displayName: "Push NuGet Packages"
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/drop/*.nupkg;!$(Pipeline.Workspace)/drop/*.symbols.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'NuGet'